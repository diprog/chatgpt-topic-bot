import traceback

from aiogram import Router, types, Bot
from aiogram.enums import ChatType, ParseMode
from aiogram.filters import Command

import constants
import db.admin_requests
import db.logging
import db.settings
import db.user_contexts
from bot import callback_data
from bot.inline_keyboards import admin_request, admins
from bot.utils import is_main_admin, prepare_markdown
from chatgpt import ChatGPT

router = Router()


async def topic_filter(message: types.Message, topic=True):
    if not message.chat.is_forum:
        await message.answer('‚ùóÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ —Å —Ç–æ–ø–∏–∫–∞–º–∏.')
        return False

    settings = await db.settings.get()
    if not settings.is_bot_admin(message.from_user.id):
        await message.reply('‚ùóÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.')
        return False

    chat_member = await message.chat.get_member(message.from_user.id)
    if not isinstance(chat_member, (types.ChatMemberOwner, types.ChatMemberAdministrator)):
        if message.sender_chat and message.sender_chat.id != message.chat.id:
            await message.reply('‚ùóÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –≥—Ä—É–ø–ø—ã.')
            return False
        await message.reply('‚ùóÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –≥—Ä—É–ø–ø—ã.')
        return False

    if not message.message_thread_id and topic:
        await message.reply('‚ùóÔ∏è –ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ç–æ–ø–∏–∫–∞.')
        return False

    return True


async def send_logging_message(user: types.User, text: str) -> types.Message:
    bot = Bot.get_current()
    logging = await db.logging.get()
    if logging.group_id:
        if not logging.get_user_thread(user.id):
            forum_topic = await bot.create_forum_topic(logging.group_id, user.full_name)
            await logging.set_user_thread(user, forum_topic.message_thread_id)
        if thread_id := logging.get_user_thread(user.id):
            return await bot.send_message(logging.group_id, text, thread_id)


@router.message(Command('start'))
async def command_start_handler(message: types.Message) -> None:
    bot = Bot.get_current()
    settings = await db.settings.get()

    group_admin_commands = [
        types.BotCommand(command='/start', description='–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.'),
        types.BotCommand(command='/set', description='–û—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–ø–∏–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.'),
        types.BotCommand(command='/logging', description='–í—ã–±—Ä–∞—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.'),
    ]

    admin_commands_private = [
        types.BotCommand(command='/start', description='–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.'),
        types.BotCommand(command='/admins', description='–£–ø—Ä–∞–≤–ª—è—Ç—å –≤—ã–¥–∞–Ω–Ω–∞–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'),
    ]

    user_commands = [
        types.BotCommand(command='/clear', description='–û—á–∏—Å—Ç–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.')
    ]

    if settings.is_bot_admin(message.from_user.id):
        await bot.set_my_commands(user_commands + admin_commands_private, types.BotCommandScopeChat(chat_id=message.from_user.id))

    await bot.set_my_commands(user_commands + group_admin_commands, types.BotCommandScopeAllChatAdministrators())
    await bot.set_my_commands(user_commands, types.BotCommandScopeAllGroupChats())
    await message.answer('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω.')


@router.message(Command('id'))
async def command_id(message: types.Message) -> None:
    await message.answer(str(message.from_user.id))


@router.message(Command('admin'))
async def command_admin(message: types.Message) -> None:
    user = message.from_user
    settings = await db.settings.get()
    if settings.is_bot_admin(user.id):
        await message.answer('‚úÖ –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.')
        return

    bot = Bot.get_current()
    await bot.send_message(constants.MAIN_ADMIN_ID,
                           f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user.full_name}</b> –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
                           reply_markup=admin_request(user.id))
    await db.admin_requests.add(user)
    await message.answer('–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞.')


@router.callback_query(callback_data.AdminRequestAnswer.filter())
async def admin_request_answer(query: types.CallbackQuery, callback_data: callback_data.AdminRequestAnswer):
    bot = Bot.get_current()
    if callback_data.decline:
        await bot.send_message(callback_data.to_user_id, '‚õîÔ∏è –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.')
        await query.message.edit_text(query.message.html_text + '\n\n<i>‚õîÔ∏è –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.</i>', reply_markup=None)
    else:
        settings = await db.settings.get()
        await settings.add_admin(callback_data.to_user_id)
        await bot.send_message(callback_data.to_user_id, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª –ø—Ä–∏–Ω—è—Ç.')
        await query.message.edit_text(query.message.html_text + '\n\n<i>‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å.</i>', reply_markup=None)
    await query.answer()


async def get_admins_text():
    settings = await db.settings.get()
    return '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.' if settings.bot_admins else '‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /admin.</i>'


@router.message(Command('admins'))
async def command_admins(message: types.Message) -> None:
    if not is_main_admin(message.from_user.id):
        await message.reply('‚ùóÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.')
        return
    await message.answer(await get_admins_text(), reply_markup=await admins())


@router.callback_query(callback_data.AdminRemove.filter())
async def admin_remove(query: types.CallbackQuery, callback_data: callback_data.AdminRemove):
    settings = await db.settings.get()
    await settings.remove_admin(callback_data.user_id)
    await Bot.get_current().send_message(callback_data.user_id, '–í—ã –±—ã–ª–∏ –ª–∏—à–µ–Ω—ã –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
    await query.message.edit_text(await get_admins_text(), reply_markup=await admins())


@router.message(Command('clear'))
async def command_clear(message: types.Message) -> None:
    if await db.user_contexts.clear(message.from_user.id):
        await message.reply('üóë –í—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏ —Å–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.')
        await send_logging_message(message.from_user, 'üóë <i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—á–∏—Å—Ç–∏–ª —Å–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.</i>')
    else:
        await message.reply('–í–∞—à –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –æ—á–∏—â–µ–Ω.')


@router.message(Command('logging'))
async def command_logging(message: types.Message) -> None:
    if await topic_filter(message, topic=False):
        logging = await db.logging.get()
        await logging.set_group(message.chat.id)
        await message.reply('‚úÖ –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –ª–æ–≥–æ–≤.')


@router.message(Command('set'))
async def command_start_handler(message: types.Message) -> None:
    if await topic_filter(message):
        settings = await db.settings.get()
        await settings.set_topic_for_group(message.chat.id, message.message_thread_id)
        await message.reply('‚úÖ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞.')


@router.message()
async def any_message(message: types.Message) -> None:
    if not message.text or message.text.startswith('/'):
        return

    bot = Bot.get_current()
    user_id = message.from_user.id
    settings = await db.settings.get()
    if (message.message_thread_id and settings.is_message_in_allowed_thread(message)) or (
            settings.is_bot_admin(user_id) and message.chat.type == ChatType.PRIVATE):
        reply_message = await message.reply('üïë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
        async with ChatGPT(constants.CHATGPT_KEY) as gpt:
            try:
                contexts = await db.user_contexts.get()
                print(contexts.length(user_id))
                answer = await gpt.completions(
                    contexts.messages_dict(user_id) + [dict(content=message.text, role='user')])
                await reply_message.edit_text(answer, parse_mode=None)
                await contexts.add_message(user_id, message.text, 'user')
                await contexts.add_message(user_id, answer, 'assistant')

                if user_message := await send_logging_message(message.from_user, 'üë§ ' + message.text):
                    await user_message.reply('ü§ñ ' + answer, parse_mode=None)
            except:
                await reply_message.edit_text(
                    'üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é /clear.</i>')
                await bot.send_message(constants.DEVELOPER_ID, traceback.format_exc())
